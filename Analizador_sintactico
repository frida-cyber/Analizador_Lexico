import ply.lex as lex
import ply.yacc as yacc


class Node:
    def __init__(self, type, children=None, leaf=None):
        self.type = type
        self.children = children
        self.leaf = leaf

    def __str__(self):
        if self.children:
            return f"{self.type}:{self.children}"
        else:
            return f"{self.type}:{self.leaf}"


class Lexer:
    tokens = (
        'INTEGER',
        'FLOAT',
        'LPAREN',
        'RPAREN',
        'PLUS',
        'MINUS',
        'TIMES',
        'DIVIDE',
    )

    t_ignore = ' \t\n'

    t_LPAREN = r'\('
    t_RPAREN = r'\)'
    t_PLUS = r'\+'
    t_MINUS = r'-'
    t_TIMES = r'\*'
    t_DIVIDE = r'/'

    def t_FLOAT(self, t):
        r'\d+\.\d+'
        t.value = float(t.value)
        return t

    def t_INTEGER(self, t):
        r'\d+'
        t.value = int(t.value)
        return t

    def t_error(self, t):
        print(f"Caracter ilegal {t.value[0]}")
        t.lexer.skip(1)

    def tokenize(self, data):
        self.lexer = lex.lex(module=self)
        self.lexer.input(data)
        while True:
            tok = self.lexer.token()
            if not tok:
                break
            yield tok


class Parser:
    tokens = Lexer.tokens

    precedence = (
        ('left', 'PLUS', 'MINUS'),
        ('left', 'TIMES', 'DIVIDE'),
    )

    def __init__(self, print_visitor=None):
        self.print_visitor = print_visitor

    def p_expression_binary(self, p):
        """
        expression : expression PLUS expression
                   | expression MINUS expression
                   | expression TIMES expression
                   | expression DIVIDE expression
        """
        p[0] = Node(type=p[2], children=[p[1], p[3]])

    def p_expression_group(self, p):
        """
        expression : LPAREN expression RPAREN
        """
        p[0] = p[2]

    def p_expression_number(self, p):
        """
        expression : INTEGER
                   | FLOAT
        """
        p[0] = Node(type='number', leaf=p[1])

    def p_error(self, p):
        if p:
            print(f"Sintaxis error en '{p.value}'")
        else:
            print("Sintaxis error en EOF")

    def parse(self, tokens):
        self.parser = yacc.yacc(module=self)
        return self.parser.parse(tokens)

    def traverse(self, node):
        if node.children:
            children = [self.traverse(child) for child in node.children]
            return Node(type=node.type, children=children)
        else:
            if self.print_visitor:
                return self.print_visitor.visit(node)
            else:
                return node.leaf


class PrintVisitor:
    def visit(self, node):
        return f"{node.type}:{node.leaf}"


def main():
    lexer = Lexer()
    parser = Parser(print_visitor=PrintVisitor())

    while True:
        try:
            text = input("$ ")
            tokens = lexer.tokenize(text)
            result = parser.parse(tokens)
            print(parser.traverse(result))
        except EOFError:
            break


if __name__ == '__main__':
    main()
